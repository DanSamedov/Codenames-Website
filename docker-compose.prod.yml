services:
  mysql:
    image: mysql:8.0
    restart: always
    env_file: .env.prod
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD}
      interval: 10s
      timeout: 5s
      retries: 3

  web:
    build:
      context: .
      dockerfile: codenames_app/Dockerfile.prod
    command: >
      bash -c "/codenames/codenames_app/wait-for-it.sh mysql:3306 -- /codenames/codenames_app/wait-for-it.sh redis:6379 -- daphne -b 0.0.0.0 -p 8000 codenames.asgi:application"
    env_file: .env.prod
    restart: always
    networks:
      - backend
      - frontend
    volumes:
      - static_volume:/codenames/codenames_app/staticfiles
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    restart: always
    env_file: .env.prod
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/codenames_app/static
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - frontend
    environment:
      - WEBSOCKET_HOST=ws://web:8000
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - frontend
    depends_on:
      - nginx
    command: certonly --webroot -w /var/www/certbot --email danasamedov@email.com --agree-tos --no-eff-email -d codenames.samedov.org --keep-until-expiring --noninteractive

  tailwind:
    image: node:20-alpine
    working_dir: /app/static/tailwind
    volumes:
      - ./codenames_app/static/tailwind:/app/static/tailwind
      - ./codenames_app/static/css:/app/static/css
      - ./codenames_app/templates:/app/templates
    command: ["sh", "-c", "npm install && npm run build"]

volumes:
  db_data:
  redis_data:
  static_volume:
  certbot_www:
  certbot_conf:

networks:
  backend:
    driver: bridge
    internal: true
  frontend:
    driver: bridge
